@page "/shipment/registration"

@inherits OwningComponentBase<IPostMachineRepository>

<h3>Shipment registration</h3>

<EditForm Model = "@Shipment" OnSubmit="@HandleSubmit">
    <div>
        <label>Title: </label><br/>
        <InputText class = "input" id = "title" @bind-Value="Shipment.Title"/><br/>
        <label>Description: </label><br/>
        <InputTextArea class = "input" id = "description" @bind-Value="Shipment.Description"/><br/>
    </div>
    <div>
        <label>Source machine: </label><br/>

        <select @bind="Shipment.SourceMachineId">
                @if(PostMachines != null)
                {
                    @foreach(var machine in PostMachines)
                    {
                        <option value="@machine.Id">@machine.Address</option>
                    }
                }
        </select><br/>

        <label>Destination machine: </label><br/>
        <select @bind="Shipment.DestinationMachineId">
                @if(PostMachines != null)
                {
                    @foreach(var machine in PostMachines)
                    {
                        <option value="@machine.Id">@machine.Address</option>
                    }
                }
        </select><br/>

       <button type="submit">Register shipment</button> 
    </div>
    

</EditForm>


@code {
    [Inject]
    public AuthenticationStateProvider authStateProvider { get; set; }

    [Inject]
    public IShipmentRepository ShipmentRepository { get; set; }

    public IPostMachineRepository PostMachineRepository => Service;

    public IEnumerable<PostMachine> PostMachines { get; set; }
    public Shipment Shipment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Shipment = new Shipment();
        
        //This should get id of logged in user and use it to set senderId of shipment.
        //Can't be used yet as log in is not yet implemented.

        //var user = (await authStateProvider.GetAuthenticationStateAsync()).User;
        //Shipment.SenderId = user.FindFirst(c => c.Type == "sub")?.Value;
        

        RetrievePostMachines();
    }

    public void RetrievePostMachines()
    {
        PostMachines = PostMachineRepository.PostMachines;
    }

    public async void CreateShipment()
    {
        await ShipmentRepository.CreateAsync(Shipment);
    }

    public async void HandleSubmit()
    {
        CreateShipment();
    }

}