@page "/shipment/registration"
@attribute [Authorize]
@inherits OwningComponentBase<IPostMachineRepository>

<h3>Shipment registration</h3>

<EditForm Model="@Shipment" OnSubmit="@HandleSubmit">
    <div>
        <label>Title: </label><br/>
        <InputText class="input" id="title" @bind-Value="Shipment.Title"/><br/>
        <label>Description: </label><br/>
        <InputTextArea class="input" id="description" @bind-Value="Shipment.Description"/><br/>
    </div>
    <div>
        <label>Source machine: </label><br/>

        <select @bind="Shipment.SourceMachineId">
            @if (PostMachines != null)
            {
                @foreach (var machine in PostMachines)
                {
                    <option value="@machine.Id">@machine.Address</option>
                }
            }
        </select><br/>

        <label>Destination machine: </label><br/>
        <select @bind="Shipment.DestinationMachineId">
            @if (PostMachines != null)
            {
                @foreach (var machine in PostMachines)
                {
                    <option value="@machine.Id">@machine.Address</option>
                }
            }
        </select><br/>

        <button type="submit">Register shipment</button>
    </div>


</EditForm>


@code {

    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }

    [Inject]
    ISenderRepository SenderRepository { get; set; }

    [Inject]
    IShipmentRepository ShipmentRepository { get; set; }

    IPostMachineRepository PostMachineRepository => Service;
    Sender sender;
    IEnumerable<PostMachine> PostMachines { get; set; }
    Shipment Shipment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateTask;
        var username = authState.User.Identities.First().Name;
        sender = SenderRepository.Senders.First(s => s.Username == username);
        Shipment = new Shipment { SenderId = sender.Id };
        RetrievePostMachines();
    }

    void RetrievePostMachines()
    {
        PostMachines = PostMachineRepository.PostMachines;
    }

    async void HandleSubmit()
    {
        await ShipmentRepository.CreateAsync(Shipment);
        Shipment = new Shipment { SenderId = sender.Id };
    }

}