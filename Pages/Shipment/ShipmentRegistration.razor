@page "/shipment/registration"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@inherits OwningComponentBase<IPostMachineRepository>
<PageTitle>Shipment registration</PageTitle>

<h3>Shipment registration</h3>


<div class="col-md-8 mx-auto">
    <EditForm Model="@shipment" OnValidSubmit="@HandleSubmit" @onreset="@HandleReset">
        <div class="card" style="margin: auto; min-height: 35rem; max-width: 500px">
            <h3 class="card-header">
                Register a new shipment
            </h3>
            <div class="card-body">
                @if (!string.IsNullOrWhiteSpace(_error))
                {
                    <div class="alert alert-danger">
                        @_error
                    </div>
                }
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <label class="form-label" for="title">Shipment title</label>
                <InputText class="form-control" id="title" @bind-Value="shipment.Title"/>
                <ValidationMessage For="@(() => shipment.Title)"/>

                <label class="form-label" for="description">Description (optional)</label>
                <InputTextArea class="form-control" id="description" @bind-Value="shipment.Description"/><br/>

                <label class="form-label" for="source-machine">Source post machine</label>
                <InputSelect @bind-Value="shipment.SourceMachineId" id="source-machine" class="form-select">
                    <option value="">-- SELECT --</option>
                    @foreach (var machine in PostMachines)
                    {
                        <option value="@machine.Id">@machine.Address</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => shipment.SourceMachineId)"/>

                <label class="form-label" for="destination-machine">Destination post machine</label>
                <InputSelect @bind-Value="shipment.DestinationMachineId" id="destination-machine" class="form-select">
                    <option value="">-- SELECT --</option>
                    @foreach (var machine in PostMachines)
                    {
                        <option value="@machine.Id">@machine.Address</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => shipment.DestinationMachineId)"/>
            </div>
            <div class="card-footer d-flex">
                <button type="submit" class="btn btn-primary">Register shipment</button>
                <button type="reset" class="btn btn-secondary ms-auto">Reset</button>
            </div>
        </div>
    </EditForm>
</div>


@code {

    [CascadingParameter]
    Task<AuthenticationState> AuthStateTask { get; set; }

    [Inject]
    ISenderRepository SenderRepository { get; set; }

    [Inject]
    IShipmentService ShipmentService { get; set; }

    IPostMachineRepository PostMachineRepository => Service;
    Sender sender;
    IEnumerable<PostMachine> PostMachines { get; set; }
    NewShipment shipment { get; set; }

    string? _error;

    protected override async Task OnInitializedAsync()
    {
        PostMachines = PostMachineRepository.PostMachines
            .Select(m => new PostMachine { Address = m.Address, Id = m.Id, Name = m.Name });
        shipment = new NewShipment();
        var authState = await AuthStateTask;
        var username = authState.User.Identities.First().Name;
        sender = (await SenderRepository.GetByUsername(username!))!;
    }

    async Task HandleSubmit()
    {
        if (shipment.SourceMachineId == shipment.DestinationMachineId)
        {
            _error = "Source and destination post machines cannot match";
            return;
        }

        var newShipment = new Shipment
        {
            Title = shipment.Title!,
            Description = shipment.Description,
            SenderId = sender.Id,
            SourceMachineId = (long)shipment.SourceMachineId!,
            DestinationMachineId = (long)shipment.DestinationMachineId!
        };
        await ShipmentService.CreateAsync(newShipment);
        NavigationManager.NavigateTo($"/shipment/{newShipment.Id}");
    }

    void HandleReset()
    {
        shipment.Title = null;
        shipment.Description = null;
        shipment.DestinationMachineId = null;
        shipment.SourceMachineId = null;
    }

    public class NewShipment
    {
        [Required(ErrorMessage = "Shipment title is required")]
        public string? Title { get; set; }

        public string? Description { get; set; }

        [Required(ErrorMessage = "Source post machine is required")]
        public long? SourceMachineId { get; set; }

        [Required(ErrorMessage = "Destination post machine is required")]
        public long? DestinationMachineId { get; set; }
    }

}
