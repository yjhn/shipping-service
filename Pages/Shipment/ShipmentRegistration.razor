@page "/shipment/registration"
@attribute [Authorize]
@inherits OwningComponentBase<IPostMachineRepository>
@inject NavigationManager NavigationManager

<h3>Shipment registration</h3>

<EditForm Model = "@Shipment" OnSubmit="@HandleSubmit">
    <div>
        <label>Title: </label><br/>
        <InputText class = "input" id = "title" @bind-Value="Shipment.Title"/><br/>
        <label>Description: </label><br/>
        <InputTextArea class = "input" id = "description" @bind-Value="Shipment.Description"/><br/>
    </div>
    <div>
        <label>Source machine: </label><br/>

        <select @bind="Shipment.SourceMachineId">
                @if(PostMachines != null)
                {
                    @foreach(var machine in PostMachines)
                    {
                        <option value="@machine.Id">@machine.Address</option>
                    }
                }
        </select><br/>

        <label>Destination machine: </label><br/>
        <select @bind="Shipment.DestinationMachineId">
                @if(PostMachines != null)
                {
                    @foreach(var machine in PostMachines)
                    {
                        <option value="@machine.Id">@machine.Address</option>
                    }
                }
        </select><br/>

       <button type="submit" disabled="@DisableRegisterButton">Register shipment</button> 
    </div>

</EditForm>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask {get; set;}
    [Inject]
    public ISenderRepository SenderRepository { get; set; }
    [Inject]
    public IShipmentRepository ShipmentRepository { get; set; }

    public IPostMachineRepository PostMachineRepository => Service;

    public IEnumerable<PostMachine> PostMachines { get; set; }
    public Shipment Shipment { get; set; }
    public Sender Sender { get; set; }
    public bool DisableRegisterButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateTask;
        var username = authState.User.Identities.First().Name;
        Sender = SenderRepository.Senders.First(s => s.Username == username);
        Shipment = new Shipment {SenderId = Sender.Id};
        RetrievePostMachines();
    }

    public void RetrievePostMachines()
    {
        PostMachines = PostMachineRepository.PostMachines;
    }

    public async void HandleSubmit()
    {
        DisableRegisterButton = true;
        await ShipmentRepository.CreateAsync(Shipment);
        long shipmentId = ShipmentRepository.Shipments.
            Where(s => s.SenderId == Sender.Id).
            OrderByDescending(s => s.Created).First().Id;
        NavigationManager.NavigateTo($"/shipment/{shipmentId}");
    }

}