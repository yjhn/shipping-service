@page "/shipment/{id:long}"
@attribute [Authorize]
@inject NavigationManager NavigationManager
<PageTitle>Shipment details</PageTitle>

@inject ILogger<ShipmentDetails> _logger
<h3>Shipment details</h3>
@if(Shipment != null) {
    if (Role == "Sender")
    {
        <p>Title: @Shipment.Title</p>
        <p>Description: @Shipment.Description</p>
        <p>Status: @Shipment.Status</p>
        if (Shipment.Courier != null)
        {
            <p>Courier's username: @Shipment.Courier.Username</p>
        } 
        <p>Sender source machine unlocking code: @(Shipment.SrcPmSenderUnlockCode?.ToString() ?? "Not available")</p>
        <p>Receiver destination machine unlocking code: @(Shipment.DestPmReceiverUnlockCode?.ToString() ?? "Not available")</p>
    }
    else if (Role == "Courier")
    {
        <p>Sender's username: @Shipment.Sender.Username</p>
        <p>Courier source machine unlocking code: @(Shipment.SrcPmCourierUnlockCode?.ToString() ?? "Not available")</p>
        <p>Courier destination machine unlocking code: @(Shipment.DestPmCourierUnlockCode?.ToString() ?? "Not available")</p>
    }
    <p>Source post machine name: @Shipment.SourceMachine.Name</p>
    <p>Source post machine address: @Shipment.SourceMachine.Address</p>
    <p>Destination post machine name: @Shipment.DestinationMachine.Name</p>
    <p>Destination post machine address: @Shipment.DestinationMachine.Address</p>
    <p>Tracking code: @_trackingCode</p>
    <p>Tracking link: <a href="@_trackingLink">@_trackingLink</a></p>
}

<button class="btn btn-primary"
        @onclick="@(e => NavigationManager.NavigateTo(ShipmentListUrl()))">
    Go to shipment list
</button>

@code {

    [CascadingParameter]
    Task<AuthenticationState> authStateTask {get; set;}
    [Parameter]
    public long Id { get; set; }
    [Inject]
    IShipmentService ShipmentService { get; set; }
    Shipment Shipment { get; set; }
    string Role;
    string _trackingCode;
    string _trackingLink;


    string ShipmentListUrl() => Role == "Sender" ? "/shipment" : "/courier";

    protected override async Task OnInitializedAsync()
    {
        Shipment = await ShipmentService.SelectIncludeAll(Id);

        if (Shipment == null)
        {
            NavigationManager.NavigateTo("/");
        }
        _trackingCode = Shipment.Id.ToString() + "-" + ShipmentService.GenerateIdHash(Id);
        _trackingLink = NavigationManager.BaseUri + "tracking/shipment/" + _trackingCode;

        var authState = await authStateTask;
        var username = authState.User.Identities.First().Name;
        
        _logger.LogInformation("User: {0} ;Rights: Sender; Time: {1}, Method: {2}", username, DateTime.UtcNow, nameof(OnInitializedAsync));
        try
        {
            Role = authState.User.Claims.First(x => x.Type == ClaimTypes.Role).Value;
            if (Role == "Sender")
            {
                if (Shipment.Sender.Username != username)
                {
                    NavigationManager.NavigateTo("/");
                }
            }
            else if (Role == "Courier")
            {
                if (Shipment.Status == ShipmentStatus.InDestinationPostMachine ||
                    Shipment.Status == ShipmentStatus.Delivered || 
                    Shipment.Courier == null || Shipment.Courier.Username != username)
                {
                    NavigationManager.NavigateTo("/");
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning("User: {0} ;Rights: Sender; Time: {1}, Method: {2}", username, DateTime.UtcNow, nameof(OnInitializedAsync));
        }
        

    }

}
