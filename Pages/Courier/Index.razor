@page "/courier"

<PageTitle>Assigned shipment list</PageTitle>
<h4>Assigned Shipments</h4>
<AuthorizeView Roles="Courier">
    @if (!string.IsNullOrEmpty(assignMessage))
    {
        <div class="modal-backdrop" style="opacity: .6" />
        <div class="modal show d-block" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Cancel Assignment</h5>
                    </div>
                    <div class="modal-body">
                        @assignMessage
                    </div>
                    <div class="modal-footer">
                        <div class="row">
                            <button class="btn btn-primary" @onclick="@(async () =>{
							assignMessage = null;
						await GetAssignedShipmentsAsync();
						})">
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <table class="table table-sm table-striped table-bordered">
        <tbody>
            @if (AssignedShipments?.Count() > 0)
            {
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Sender username</th>
                    <th>Source machine name</th>
                    <th>Source machine address</th>
                    <th>Destination machine name</th>
                    <th>Destination machine address</th>
                    <th>Source machine courier unlocking code</th>
                    <th>Destination machine courier unlocking code</th>
                    <th>Status</th>
                    <th />
                </tr>
                foreach (var shipment in AssignedShipments)
                {
                    <tr>
                        <td>@shipment.Title</td>
                        <!--						<td>@(shipment.Description ?? "No description provided.")</td>-->
                <td>@shipment.Sender.Username</td>
                        <td>@shipment.SourceMachine.Name</td>
                        <td>@shipment.SourceMachine.Address</td>
                        <td>@shipment.DestinationMachine.Name</td>
                        <td>@shipment.DestinationMachine.Address</td>
                        <td>@shipment.SrcPmCourierUnlockCode</td>
                        <td>@shipment.DestPmCourierUnlockCode</td>
                        <td>@shipment.Status</td>
                        <td>
                            @if (shipment.Status == ShipmentStatus.RegisteredForSending)
                            {
                                <button class="btn btn-primary" @onclick="(async () => await UnassignShipment(shipment))
">
                                    Cancel
                                </button>
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No assigned shipments yet</td>
                </tr>
            }
        </tbody>
    </table>
    <NavLink class="btn btn-primary" href="@SearchAvailableShipmentsUrl">
        Available shipments
    </NavLink>
</AuthorizeView>

<ShipmentsList Shipments="AssignedShipments"></ShipmentsList>

@code {

    [Inject]
    public IShipmentRepository ShipmentRepository { get; set; }
    [Inject]
    public ICourierRepository CourierRepository { get; set; }
    [Inject]
    public IShipmentService ShipmentService { get; set; }

    public IEnumerable<Shipment> AssignedShipments { get; set; }
    public Courier Courier { get; set; }
    private string assignMessage;
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AssignedShipments = new List<Shipment>();
        var authState = await authStateTask;
        if (!authState.User.Identity.IsAuthenticated)
            return;
        Courier = await CourierRepository.Couriers.Include(c => c.CurrentShipments).
        FirstOrDefaultAsync(c => c.Username == authState.User.Identity.Name);
        await GetAssignedShipmentsAsync();
    }

    public async Task GetAssignedShipmentsAsync()
    {
        AssignedShipments = await ShipmentService.GetAssignedAsync(Courier.Id);
    }

    public async Task UnassignShipment(Shipment shipment)
    {
        Courier.CurrentShipments.Remove(shipment);
        await CourierRepository.UpdateAsync(Courier);
        assignMessage = "Shipment " + shipment.Id + " is unassigned.";
    }
    public string SearchAvailableShipmentsUrl = "/courier/available-shipments";
}