@page "/courier"
@attribute [Authorize(Roles = "Courier")]

<PageTitle>Assigned shipment list</PageTitle>
<h4>Assigned Shipments</h4>
@if (!string.IsNullOrEmpty(_assignMessage))
    {
        <div class="modal-backdrop" style="opacity: .6"></div>
        <div class="modal show d-block" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Cancel Assignment</h5>
                    </div>
                    <div class="modal-body">
                        @_assignMessage
                    </div>
                    <div class="modal-footer">
                        <div class="row">
                            <button class="btn btn-primary" @onclick="@(async () =>{ _assignMessage = null; await GetAssignedShipmentsAsync(); })">
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <table class="table table-sm table-striped table-bordered">
        <tbody>
        @if (AssignedShipments.Any())
        {
            <tr>
                <th>Source machine name</th>
                <th>Source machine address</th>
                <th>Destination machine name</th>
                <th>Destination machine address</th>
                <th>Source machine courier unlocking code</th>
                <th>Destination machine courier unlocking code</th>
                <th/>
            </tr>
            foreach (var shipment in AssignedShipments)
            {
                <tr>
                    <td>@shipment.SourceMachine.Name</td>
                    <td>@shipment.SourceMachine.Address</td>
                    <td>@shipment.DestinationMachine.Name</td>
                    <td>@shipment.DestinationMachine.Address</td>
                    <td>@shipment.SrcPmCourierUnlockCode</td>
                    <td>@shipment.DestPmCourierUnlockCode</td>
                    <td>
                        @if (shipment.Status == ShipmentStatus.InSourcePostMachine)
                        {
                            <button class="btn btn-primary" @onclick="async () => await UnassignShipment(shipment)">
                                Unassign
                            </button>
                        }
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No assigned shipments yet</td>
            </tr>
        }
        </tbody>
    </table>
    <NavLink class="btn btn-primary" href="@SearchAvailableShipmentsUrl">
        Available shipments
    </NavLink>

@code {

    [Inject]
    ICourierService CourierService { get; set; }

    [Inject]
    IShipmentService ShipmentService { get; set; }

    IEnumerable<Shipment> AssignedShipments { get; set; }
    Courier Courier { get; set; }
    string? _assignMessage;

    [CascadingParameter]
    Task<AuthenticationState> AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AssignedShipments = new List<Shipment>();
        var authState = await AuthStateTask;
        Courier = (await CourierService.GetByUsername(authState.User.Identity!.Name!))!;
        await GetAssignedShipmentsAsync();
    }

    async Task GetAssignedShipmentsAsync()
    {
        AssignedShipments = await ShipmentService.GetAssignedAsync(Courier.Id);
    }

    async Task UnassignShipment(Shipment shipment)
    {
        await ShipmentService.UnassignShipment(Courier, shipment);
        _assignMessage = "Shipment with ID " + shipment.Id + " is no longer assigned to you.";
    }

    const string SearchAvailableShipmentsUrl = "/courier/available-shipments";
}
