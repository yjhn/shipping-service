@page "/login"
@using System.ComponentModel.DataAnnotations
@using shipping_service.Models
@using shipping_service.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAccountService accountService
<PageTitle>Log in</PageTitle>
<div class="col-md-8 mx-auto">
        <div class="card" style="margin: auto; max-width: 500px">
            <h3 class="card-header">
                Login
            </h3>
            <div class="card-body">
                @if (!string.IsNullOrWhiteSpace(error))
                {
                    <div class="alert alert-danger">
                        @error
                    </div>
                }
                <EditForm Model="@user" OnValidSubmit="@HandleSubmit" @onreset="HandleReset">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <label class="form-label" for="username">Username</label>
                    <InputText id="username" @bind-Value="@user.Username" class="form-control" style="margin-bottom: 1rem;" />
					                    <ValidationMessage For="@(() => user.Username)" />

                    <label class="form-label" for="password">Password</label>
                    <InputText type="password" id="password" @bind-Value="@user.Password" class="form-control" style="margin-bottom: 1rem;" />
					                    <ValidationMessage For="@(() => user.Password)" />

                    <button class="btn btn-primary" type="submit" style="margin-top: .5rem;">Log in</button>
                <button type="reset" class="btn btn-secondary" style="margin-top: .5rem;">Reset</button>
                </EditForm>
            </div>
        </div>
    </div>

@code {
	private UserLogin user = new();
	private string error;
	[CascadingParameter]
	private Task<AuthenticationState> authStateTask {get; set;}

	protected override async Task OnInitializedAsync()
	{
		var authState = await authStateTask;
		var authUser = authState.User;
		if (authUser.Identity.IsAuthenticated)
		{
			NavigationManager.NavigateTo("/");
		}
	}

	protected async Task HandleSubmit()
	{
		var (loginError, role) = await accountService.LoginAsync(user);
		if (loginError == null)
		{
			var authModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/auth.js");
			await authModule.InvokeVoidAsync("SignIn", user.Username, role, user.Password, "/");
		}
		else{
			error = loginError;
		}
}

	protected async Task HandleReset()
	{
		        user = new UserLogin();
	}
	
}
