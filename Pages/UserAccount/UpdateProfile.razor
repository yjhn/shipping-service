@page "/account/manage"
@using shipping_service.Models
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject TokenProvider TokenProvider
<div class="col-md-8 mx-auto">
    <div class="card" style="margin: auto; max-width: 500px">
        <h3 class="card-header">
            User Profile
        </h3>
        <div class="card-body">
            @if (!string.IsNullOrWhiteSpace(_error))
            {
                <div class="alert alert-danger">
                    @_error
                </div>
            } else if (_success)
            {
                <div class="alert alert-success">Profile was updated successfully.</div>
            }
            <EditForm Model="@_user" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <label class="form-label" for="username">Username</label>
                <InputText id="username" @bind-Value="@_user.Username" class="form-control" style="margin-bottom: 1rem;"/>
                <ValidationMessage For="@(() => _user.Username)"/>

                <label class="form-label" for="role">Role</label>
                <InputSelect @bind-Value="_user.Role" class="form-select" id="role" disabled>
                    <option value="Sender" disabled>Sender</option>
                    <option value="Courier" disabled>Courier</option>
                </InputSelect>
                <ValidationMessage For="@(() => _user.Role)"/>

                <button class="btn btn-primary" type="submit" style="margin-top: .5rem;">Update</button>
            </EditForm>
            <a href="/account/change-password">Change Password</a>
        </div>
    </div>
</div>

@code {
    readonly UserUpdate _user = new();
    string? _error;
    bool _success;

    [CascadingParameter]
    Task<AuthenticationState> AuthStateTask { get; set; }

    string oldUsername;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var authUser = authState.User;
        if (!authUser.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        _user.Username = authUser.Identity.Name;
        _user.Role = authUser.IsInRole("Sender") ? "Sender" : "Courier";
        oldUsername = _user.Username;
    }

    async Task HandleSubmit()
    {
        _success = false;

        _error = await AccountService.UpdateAsync(_user.Username, oldUsername);
        if (_error == null)
        {
            var authModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/auth.js");
            await authModule.InvokeVoidAsync("Update", _user.Username, oldUsername, _user.Role, TokenProvider.AntiForgeryToken);
            _success = true;
        }
    }


    class UserUpdate
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }
        public string Role { get; set; }
    }

}
