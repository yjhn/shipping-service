@page "/register"
@using System.ComponentModel.DataAnnotations
@using shipping_service.Models
@using shipping_service.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAccountService accountService
<div class="col-md-8 mx-auto">
        <div class="card" style="margin: auto; max-width: 500px">
            <h3 class="card-header">
                Register
            </h3>
            <div class="card-body">
                @if (!string.IsNullOrWhiteSpace(error))
                {
                    <div class="alert alert-danger">
                        @error
                    </div>
                }
                <EditForm Model="@user" OnValidSubmit="@HandleSubmit" @onreset="HandleReset">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <label class="form-label" for="username">Username</label>
                    <InputText id="username" @bind-Value="@user.Username" class="form-control" style="margin-bottom: 1rem;" />
					                    <ValidationMessage For="@(() => user.Username)" />

                    <label class="form-label" for="password">Password</label>
                    <InputText type="password" id="password" @bind-Value="@user.Password" class="form-control" style="margin-bottom: 1rem;" />
					                    <ValidationMessage For="@(() => user.Password)" />

                    <label class="form-label" for="confirmPassword">Confirm Password</label>
                    <InputText type="password" id="confirmPassword" @bind-Value="@user.ConfirmPassword" class="form-control" style="margin-bottom: 1rem;" />
					                    <ValidationMessage For="@(() => user.ConfirmPassword)" />

											                    <label class="form-label" for="role">Role</label>
																                    <InputSelect @bind-Value="user.Role" class="form-control" id="role">
                        <option value="Sender">Sender</option>
                        <option value="Courier">Courier</option>
                    </InputSelect>
					                    <ValidationMessage For="@(() => user.Role)" />

                    <button class="btn btn-primary" type="submit" style="margin-top: .5rem;">Register</button>
                <button type="reset" class="btn btn-secondary" style="margin-top: .5rem;">Reset</button>
                </EditForm>
            </div>
        </div>
    </div>

@code {
	private User user = new();
	private string error;
	[CascadingParameter]
	private Task<AuthenticationState> authStateTask {get; set;}
	private ValueTask<string> RedirectTo(string path)
	{
		return JSRuntime.InvokeAsync<string>(
			"clientJsfunctions.RedirectTo", path);
	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await authStateTask;
		var authUser = authState.User;
		if (authUser.Identity.IsAuthenticated)
		{
			NavigationManager.NavigateTo("/");
		}
	}

	protected async Task HandleSubmit()
	{
		error = await accountService.RegisterAsync(user);
		if (error == null)
		{
			await RedirectTo("/login");
		}
	}

	protected async Task HandleReset()
	{
		        user = new User();
	}
	
}