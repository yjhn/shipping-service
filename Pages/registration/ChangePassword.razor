@page "/account/change-password"
@using System.ComponentModel.DataAnnotations
@using shipping_service.Models
@using shipping_service.Services
@inject IAccountService accountService
<PageTitle>Change password</PageTitle>

<AuthorizeView Context="userContext">
    <Authorized>
<div class="col-md-8 mx-auto">
        <div class="card" style="margin: auto; max-width: 500px">
            <h3 class="card-header">
                Change password of user @userContext.User.Identity?.Name
            </h3>
            <div class="card-body">
                @if (!string.IsNullOrWhiteSpace(error))
                {
                    <div class="alert alert-danger">
                        @error
                    </div>
                }
@if(success)
{
	<div class="alert-success">Password was changed successfully.</div>
}
                <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <label class="form-label" for="oldPassword">Old password</label>
                    <InputText type="password" id="oldPassword" @bind-Value="@model.OldPassword" class="form-control" style="margin-bottom: 1rem;" />
					                    <ValidationMessage For="@(() => model.OldPassword)" />

											                    <label class="form-label" for="new1">New Password</label>
																                    <InputText type="password" @bind-Value="@model.New1" class="form-control" id="new1" style="margin-bottom: 1rem;" />
					                    <ValidationMessage For="@(() => model.New1)" />

											                    <label class="form-label" for="new2">Confirm new Password</label>
																                    <InputText type="password" @bind-Value="@model.New2" class="form-control" id="new2" style="margin-bottom: 1rem;" />
					                    <ValidationMessage For="@(() => model.New2)" />

                    <button class="btn btn-primary" type="submit" style="margin-top: .5rem;">Change</button>
                </EditForm>
            </div>
        </div>
    </div>
</Authorized>
</AuthorizeView>
@code {
	private PasswordChangeModel model = new();
	private string error;
	private bool success = false;
	[CascadingParameter]
	private Task<AuthenticationState> authStateTask {get; set;}

	protected async Task HandleSubmit()
	{
		success = false;
		var authState = await authStateTask;
		var authUser = authState.User;
		error = await accountService.ChangePasswordAsync(model.OldPassword, model.New1, authUser.Identity.Name);
		if (error == null)
		{
			success = true;
		}

	}


	private class PasswordChangeModel
	{
[Required]
        [RegularExpression (@"^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!*@#$%^&+=_]).*$", ErrorMessage="Password must be at least 8 characters long, contain at least 1 number, small/capital letter and special symbol")]
		public string OldPassword { get; set; }
[Required]
        [RegularExpression (@"^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!*@#$%^&+=_]).*$", ErrorMessage="Password must be at least 8 characters long, contain at least 1 number, small/capital letter and special symbol")]
		public string New1 { get; set; }
        [Required]
        [Compare("New1")]
				public string New2 { get; set; }
	}

}

