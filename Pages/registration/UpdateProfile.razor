@page "/account/manage"
@using System.ComponentModel.DataAnnotations
@using shipping_service.Models
@using shipping_service.Services
@inject IAccountService accountService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor accessor
@inject TokenProvider _tokenProvider
<div class="col-md-8 mx-auto">
        <div class="card" style="margin: auto; max-width: 500px">
            <h3 class="card-header">
                User Profile
            </h3>
            <div class="card-body">
                @if (!string.IsNullOrWhiteSpace(error))
                {
                    <div class="alert alert-danger">
                        @error
                    </div>
                }
@if(success)
{
	<div class="alert-success">Profile was updated successfully.</div>
}
                <EditForm Model="@user" OnValidSubmit="@HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <label class="form-label" for="username">Username</label>
                    <InputText id="username" @bind-Value="@user.Username" class="form-control" style="margin-bottom: 1rem;" />
					                    <ValidationMessage For="@(() => user.Username)" />

											                    <label class="form-label" for="role">Role</label>
																                    <InputSelect @bind-Value="user.Role" class="form-control" id="role">
                        <option value="Sender" disabled>Sender</option>
                        <option value="Courier" disabled>Courier</option>
                    </InputSelect>
					                    <ValidationMessage For="@(() => user.Role)" />

                    <button class="btn btn-primary" type="submit" style="margin-top: .5rem;">Update</button>
                </EditForm>
<a href="/account/change-password">Change Password</a>
            </div>
        </div>
    </div>

@code {
	private UserUpdate user = new();
	private string error;
	private bool success = false;
	[CascadingParameter]
	private Task<AuthenticationState> authStateTask {get; set;}
	private string oldUsername;
	protected override async Task OnInitializedAsync()
	{
		var authState = await authStateTask;
		var authUser = authState.User;
		if (!authUser.Identity.IsAuthenticated)
		{
			NavigationManager.NavigateTo("/");
		}
		user.Username = authUser.Identity.Name;
		user.Role = authUser.IsInRole("Sender") == true ? "Sender" : "Courier";
		oldUsername = user.Username;
	}

	protected async Task HandleSubmit()
	{
		success = false;

error = await accountService.UpdateAsync(user.Username, oldUsername);
		if (error == null)
		{
			var authModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/auth.js");
			await authModule.InvokeVoidAsync("Update", user.Username, oldUsername, user.Role, _tokenProvider.AntiForgeryToken);
			success = true;
		}

	}


	private class UserUpdate
	{
		public string Username { get; set; }
		public string Role { get; set;}
	}

}

